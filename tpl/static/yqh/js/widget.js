// Generated by CoffeeScript 1.7.1
(function() {
  this.aniTasks = function() {
    this.tasks = [];
    this.task_index = -1;
    return this;
  };

  this.aniTasks.prototype.addTaskPair = function(ani, delay) {
    if (delay == null) {
      delay = 0;
    }
    return this.tasks.push([ani, delay]);
  };

  this.aniTasks.prototype.animateCurrent = function(recover) {
    var ani, delay;
    if (recover == null) {
      recover = false;
    }
    if (!this.tasks[this.task_index]) {
      if (this.task_index > this.tasks.length) {
        this.task_index = this.tasks.length;
      } else if (this.task_index < -1) {
        this.task_index = -1;
      }
      return false;
    }
    delay = this.tasks[this.task_index][1];
    ani = this.tasks[this.task_index][0];
    return setTimeout((function() {
      if (recover) {
        return ani.init();
      } else {
        return ani.animate();
      }
    }), delay);
  };

  this.aniTasks.prototype.next = function(recover) {
    if (recover == null) {
      recover = false;
    }
    this.task_index += 1;
    return this.animateCurrent(recover);
  };

  this.aniTasks.prototype.prev = function(recover) {
    if (recover == null) {
      recover = false;
    }
    this.task_index -= 1;
    return this.animateCurrent(recover);
  };

  this.aniTasks.prototype.animate = function(reverse) {
    var _results, _results1;
    if (reverse == null) {
      reverse = false;
    }
    if (reverse) {
      _results = [];
      while (this.prev(true)) {
        _results.push(null);
      }
      return _results;
    } else {
      _results1 = [];
      while (this.next()) {
        _results1.push(null);
      }
      return _results1;
    }
  };

  this.aniMove = function(obj, target_pos) {
    var $obj;
    $obj = $(obj);
    $obj.css('transition', 'top 0.5s ease, left 0.5s ease, bottom 0.5s ease, right 0.5s ease');
    $obj.css('-webkit-transition', 'top .2s ease, left .2s ease, bottom .2s ease, right .2s ease');
    $obj.css('transform', 'translateZ(0) !important');
    $obj.css('-webkit-transform', 'translateZ(0) !important');
    this.init_pos = {
      'top': $obj.css('top'),
      'right': $obj.css('right'),
      'bottom': $obj.css('bottom'),
      'left': $obj.css('left')
    };
    this.target_pos = target_pos;
    this.$obj = $obj;
    return this;
  };

  this.aniMove.prototype.animate = function() {
    return this.$obj.css(this.target_pos);
  };

  this.aniMove.prototype.init = function() {
    return this.$obj.css(this.init_pos);
  };

  this.lightbox = (function() {
    var $lb, autohide, retfn;
    autohide = true;
    $lb = $('<div id="lightbox"></div>');
    $lb.css({
      position: 'fixed',
      width: '100%',
      height: '100%',
      display: 'none',
      top: 0,
      left: 0,
      opacity: 0,
      'transition': 'opacity 0.5s ease',
      '-webkit-transition': 'opacity 0.5s ease',
      background: 'rgba(0,0,0,0.3)',
      'z-index': 100
    });
    $lb.tap(function() {
      if (!autohide) {
        return null;
      }
      return lightbox.hide();
    });
    $(function() {
      return $('body').append($lb);
    });
    retfn = function(html, ah) {
      if (ah == null) {
        ah = true;
      }
      autohide = ah;
      $lb.html(html);
      $lb.show();
      return $lb.css('opacity', 1);
    };
    retfn.hide = function() {
      $lb.css('opacity', 0);
      return setTimeout(function() {
        return $lb.hide();
      }, 500);
    };
    return retfn;
  })();

  this.introCard = (function() {
    var $card;
    $card = $('<div id="intro-card"></div>');
    $card.css({
      width: '70%',
      height: '75%',
      overflow: 'auto',
      position: 'absolute',
      top: '50%',
      left: '50%',
      'border-radius': '10px',
      'background': 'rgba(0,0,0,0.5)'
    });
    return function($content, css) {
      if (css == null) {
        css = {};
      }
      return $card.html($content).clone().css({
        'margin-top': $(window).height() * -0.75 / 2,
        'margin-left': $(window).width() * -0.70 / 2
      }).css(css);
    };
  })();



  this.form_card2 = {};

  this.formCard2 = (function() {
    var $card;
    $card = $('<div id="intro-card"></div>');
    $card.css({
      width: '300px',
      height: '330px',
      overflow: 'auto',
      position: 'absolute',
      top: ($(window).height() - 330) / 2,
      left: ($(window).width() - 300) / 2,
      'border-radius': '10px',
      'background': 'rgba(0,0,0,0.5)'
    });
    return function($content, css) {
      if (css == null) {
        css = {};
      }
      this.form_card2 = $card.html($content).clone();
      return this.form_card2.css(css);
    };
  })();

  

}).call(this);
